// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/flag"
use "std/jule"
use "std/jule/parser"
use "std/jule/token"
use "std/os"
use "std/os/filepath"
use "std/strings"

static mut _W = new(bool, false) // Flag -w

fn writeError(message: str) {
	os::Stderr().WriteStr(message)!
	os::Stderr().WriteByte('\n')!
}

// Prints formatted data to relevant file.
fn printFormat(path: str, data: []byte) {
	if data == nil {
		ret
	}
	if *_W {
		os::WriteFile(path, data, 0o660) else {
			writeError("error: could not write to file: " + path)
			ret
		}
	} else {
		os::Stdout().Write(data) else {
			writeError("error: could not write stdout")
			ret
		}
	}
}

// Formats data with path, and returns result.
// If result is nil, we have an error(s).
fn format(path: str, mut data: []byte): []byte {
	mut file := token::Fileset.New(path)
	unsafe { file.FillMut(data) }
	mut errors := token::Lex(file, token::Comments)
	if len(errors) > 0 {
		writeError("error: file could not formatted, have error(s): " + path)
		ret nil
	}

	mut cm := commentMap.build(file.Tokens)
	mut finfo := parser::ParseFile(file)
	if len(finfo.Errors) > 0 {
		writeError("error: file could not formatted, have error(s): " + path)
		ret nil
	}

	fmt := formatter.new()
	ret fmt.format(finfo.AST, cm)
}

fn formatFile(path: str) {
	mut ctx := os::ReadFile(path) else {
		writeError("error: file could not read: " + path)
		ret
	}
	data := format(path, ctx)
	printFormat(path, data)
}

fn parsePackage(path: str) {
	mut dirents := os::ReadDir(path) else {
		writeError("error: connot read package directory: " + path)
		ret
	}
	for _, dirent in dirents {
		// Skip directories, and non-jule files.
		if dirent.Stat.IsDir() || !strings::HasSuffix(dirent.Name, jule::Ext) {
			continue
		}
		filepath := filepath::Join(path, dirent.Name)
		formatFile(filepath)
	}
}

fn parse(path: str) {
	stat := os::Stat(path) else {
		writeError("error: connot read path: " + path)
		ret
	}
	m := stat.Mode()
	match {
	| m.IsDir():
		parsePackage(path)
		ret
	| m.IsRegular():
		if strings::HasSuffix(path, jule::Ext) {
			formatFile(path)
			ret
		}
	}
	writeError("error: path is not supported: " + path)
}

fn cliMode() {
	if *_W {
		writeError("error: -w argument cannot used with stdout mode")
		ret
	}
	mut i := 0
	mut buf := make([]byte, 1024)
	for {
		n := os::Stdin().Read(buf[i:]) else {
			writeError("error: could not read from stdin")
			ret
		}
		if n == 0 {
			// EOF
			break
		}
		i += n
		if i >= len(buf) {
			// Need more space, so grow.
			mut newBuf := make([]byte, len(buf)*2)
			copy(newBuf, buf)
			buf = newBuf
		}
	}
	buf = buf[:i]
	printFormat("<stdin>", format("<stdin>", buf))
}

fn main() {
	mut args := os::Args()
	args = args[1:] // Skip program path.
	mut flag := flag::FlagSet.New()
	flag.AddVar(_W, "write", 'w', "write result to (source) file instead of stdout")
	args = flag.Parse(args)!
	if len(args) == 0 {
		cliMode()
	} else {
		parse(args[0])
	}
}