// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/env"
use "std/fs"
use "std/fs/path"
use "std/jule/build"
use "std/jule/parser"
use "std/jule/sema"
use "std/jule/token"
use "std/strings"

fn formatFile(path: str) {
	mut file := token::Fileset.New(path)
	file.Fill(fs::File.Read(path) else {
		outln("error: file could not read: " + path)
		ret
	})
	mut errors := token::Lex(file, token::LexMode.Comment)
	if len(errors) > 0 {
		outln("error: file could not formatted, have error(s): " + path)
		ret
	}

	mut cm := commentMap.build(file.Tokens)
	mut finfo := parser::ParseFile(file)
	if len(finfo.Errors) > 0 {
		outln("error: file could not formatted, have error(s): " + path)
		ret
	}

	mut f := finfo.Ast
	fmt := formatter.new()
	buf := fmt.format(f, cm)
	fpath := f.File.Path
	fs::File.Write(fpath, buf, 0o660) else {
		outln("error: could not write to file: " + fpath)
		ret
	}
}

fn parsePackage(path: str) {
	mut dirents := fs::Directory.Read(path) else {
		outln("error: connot read package directory: " + path)
		ret
	}
	for _, dirent in dirents {
		// Skip directories, and non-jule files.
		if dirent.Stat.IsDir() || !strings::HasSuffix(dirent.Name, build::Ext) {
			continue
		}
		filepath := path::Join(path, dirent.Name)
		formatFile(filepath)
	}
}

fn main() {
	args := env::Args()
	if len(args) == 1 {
		ret
	}
	parsePackage(args[1])
}