// Copyright 2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/testing"

struct formatTest {
	data: str
	out:  str
}

static formatTests = []formatTest([
	{
		data: `	const 	(
kind	: str       = types :: F32
	max				 = types	::MaxF32
			min 		= types::MinF32
	smallestNonzero =	 types::		SmallestNonzeroF32
	)	`,
		out: `const (
	kind: str       = types::F32
	max             = types::MaxF32
	min             = types::MinF32
	smallestNonzero = types::SmallestNonzeroF32
)`,
	},
	{
		data: `const(
	Sunaday				: Weekday	 =						iota
	Monday
					Tuesday
				Wednesdaysssssssssss
						Thursday
Friday
Saturday)`,
		out: `const (
	Sunaday: Weekday = iota
	Monday
	Tuesday
	Wednesdaysssssssssss
	Thursday
	Friday
	Saturday
)`,
	},
	{
		data: `const (
	Sunday: Weekday = iota // foo
     	Monaday	:    int            // foo
	Tuesaday	:   	bool    = iota // foo
         	Wednesday	:  bool           // foo
foo        // foo
Thuradayaaaaaaaaa          = iota// foo
aaFriaday:			 bool    = iota// foo
Saturday:          int     = iota // foo
foo                      // foo
foo:         		       str            // foo
	 z:                 int     = iota 				// foo
 foa:bool= iota// foo
)`,
		out: `const (
	Sunday:            Weekday = iota // foo
	Monaday:           int            // foo
	Tuesaday:          bool    = iota // foo
	Wednesday:         bool           // foo
	foo                               // foo
	Thuradayaaaaaaaaa          = iota // foo
	aaFriaday:         bool    = iota // foo
	Saturday:          int     = iota // foo
	foo                               // foo
	foo:               str            // foo
	z:                 int     = iota // foo
	foa:               bool    = iota // foo
)`,
	},
	{
		data: `const (
	Sunday: Weekday=iota // foo
	Monaday: int     // foo
	Tuesaday: bool = iota // foo
	Wednesday: bool
				foo          // foo
	Thuradayaaaaaaaaa       = iota // foo
	aaFriaday:   			      bool=iota// foo
	Saturday:          int  				= 			iota // foo
			foo
	foo: str         				// foo
	z:   	int  =iota 				// foo
			foa							:bool = iota 				// foo
			)`,
		out: `const (
	Sunday:    Weekday = iota // foo
	Monaday:   int            // foo
	Tuesaday:  bool    = iota // foo
	Wednesday: bool
	foo                            // foo
	Thuradayaaaaaaaaa       = iota // foo
	aaFriaday:         bool = iota // foo
	Saturday:          int  = iota // foo
	foo
	foo: str         // foo
	z:   int  = iota // foo
	foa: bool = iota // foo
)`,
	},
	{
		data: `const (
Layout            = "01/02 03:04:05PM '06 -0700" // The reference time, in numerical order.
ANSIC       	      = "Mon Jan _2 15:04:05 2006"
	UnixDate          = "Mon Jan _2 15:04:05 MST 2006"			
RubyDate          = "Mon Jan 02 15:04:05 -0700 2006"
RFC822  	    =			 "02 Jan 06 15:04 MST"
RFC822Z   ="02 Jan 06 15:04 -0700" // RFC822 with numeric zone
	RFC850            ="Monday, 02-Jan-06 15:04:05 MST"
	RFC1123:fn(	bool		) ="Mon, 02 Jan 2006 15:04:05 MST"
   RFC1123Z="Mon, 02 Jan 2006 15:04:05 -0700" // RFC1123 with numeric zone
	RFC3339    ="2006-01-02T15:04:05Z07:00"
		RFC3339Nano       ="2006-01-02T15:04:05.999999999Z07:00"
	Kitchen           ="3:04PM"

Stamp="Jan _2 15:04:05"
StampMilli     ="Jan _2 15:04:05.000"
StampMicro:int="Jan _2 15:04:05.000000"
StampNano	="Jan _2 15:04:05.000000000"
DateTime 	="2006-01-02 15:04:05"
DateOnly 	="2006-01-02"
TimeOnly 	="15:04:05"
)`,
		out: `const (
	Layout            = "01/02 03:04:05PM '06 -0700" // The reference time, in numerical order.
	ANSIC             = "Mon Jan _2 15:04:05 2006"
	UnixDate          = "Mon Jan _2 15:04:05 MST 2006"
	RubyDate          = "Mon Jan 02 15:04:05 -0700 2006"
	RFC822            = "02 Jan 06 15:04 MST"
	RFC822Z           = "02 Jan 06 15:04 -0700" // RFC822 with numeric zone
	RFC850            = "Monday, 02-Jan-06 15:04:05 MST"
	RFC1123: fn(bool) = "Mon, 02 Jan 2006 15:04:05 MST"
	RFC1123Z          = "Mon, 02 Jan 2006 15:04:05 -0700" // RFC1123 with numeric zone
	RFC3339           = "2006-01-02T15:04:05Z07:00"
	RFC3339Nano       = "2006-01-02T15:04:05.999999999Z07:00"
	Kitchen           = "3:04PM"

	Stamp           = "Jan _2 15:04:05"
	StampMilli      = "Jan _2 15:04:05.000"
	StampMicro: int = "Jan _2 15:04:05.000000"
	StampNano       = "Jan _2 15:04:05.000000000"
	DateTime        = "2006-01-02 15:04:05"
	DateOnly        = "2006-01-02"
	TimeOnly        = "15:04:05"
)`,
	},
	{
		data: `const (
_              = iota
	stdLongMonth   = iota + stdNeedDate  // "January"
	stdMonth                             // "Jan"
					stdNumMonth                          // "1"
			stdZeroMonth                         // "01"
				stdLongWeekDay                       // "Monday"
					stdWeekDay                           // "Mon"
	stdDay                               // "2"
								stdUnderDay                          // "_2"
					stdZeroDay                           // "02"
					stdUnderYearDay= iota + stdNeedYday  // "__2"
					stdZeroYearDay                       // "002"
		stdHour        = iota + stdNeedClock // "15"
					stdHour12                            // "3"
stdZeroHour12                        // "03"
					stdMinute                            // "4"
					stdZeroMinute                        // "04"
	stdSecond                            // "5"
	stdZeroSecond                        // "05"
	stdLongYear    = iota+stdNeedDate  // "2006"
	stdYear                              // "06"
	stdPM          = iota+stdNeedClock // "PM"
	     		stdpm                                // "pm"
stdTZ          = iota                // "MST"
	stdISO8601TZ       // "Z0700"  // prints Z for UTC
	stdISO8601SecondsTZ                            // "Z070000"
	stdISO8601ShortTZ       // "Z07"
	stdISO8601ColonTZ                              // "Z07:00" // prints Z for UTC
	stdISO8601ColonSecondsTZ                       // "Z07:00:00"
			stdNumTZ                                       // "-0700"  // always numeric
				stdNumSecondsTz                                // "-070000"
	stdNumShortTZ                                  // "-07"    // always numeric
	stdNumColonTZ                                  // "-07:00" // always numeric
			stdNumColonSecondsTZ       // "-07:00:00"
	stdFracSecond0                                 // ".0", ".00", ... , trailing zeros included
					stdFracSecond9      // ".9", ".99", ..., trailing zeros omitted

		stdNeedDate= 				1 		<<8            // need month, day, year
stdNeedYday  	  = 				1 <<9            // need yday
stdNeedClock  = 				1<<10           // need hour, minute, second
				stdArgShift       = 				16                // extra argument in high bits, above low stdArgShift
stdSeparatorShift= 			28                // extra argument in high 4 bits for fractional second separators
stdMask           =1<<stdArgShift-1// mask out argument
)`,
		out: `const (
	_                        = iota
	stdLongMonth             = iota + stdNeedDate  // "January"
	stdMonth                                       // "Jan"
	stdNumMonth                                    // "1"
	stdZeroMonth                                   // "01"
	stdLongWeekDay                                 // "Monday"
	stdWeekDay                                     // "Mon"
	stdDay                                         // "2"
	stdUnderDay                                    // "_2"
	stdZeroDay                                     // "02"
	stdUnderYearDay          = iota + stdNeedYday  // "__2"
	stdZeroYearDay                                 // "002"
	stdHour                  = iota + stdNeedClock // "15"
	stdHour12                                      // "3"
	stdZeroHour12                                  // "03"
	stdMinute                                      // "4"
	stdZeroMinute                                  // "04"
	stdSecond                                      // "5"
	stdZeroSecond                                  // "05"
	stdLongYear              = iota + stdNeedDate  // "2006"
	stdYear                                        // "06"
	stdPM                    = iota + stdNeedClock // "PM"
	stdpm                                          // "pm"
	stdTZ                    = iota                // "MST"
	stdISO8601TZ                                   // "Z0700"  // prints Z for UTC
	stdISO8601SecondsTZ                            // "Z070000"
	stdISO8601ShortTZ                              // "Z07"
	stdISO8601ColonTZ                              // "Z07:00" // prints Z for UTC
	stdISO8601ColonSecondsTZ                       // "Z07:00:00"
	stdNumTZ                                       // "-0700"  // always numeric
	stdNumSecondsTz                                // "-070000"
	stdNumShortTZ                                  // "-07"    // always numeric
	stdNumColonTZ                                  // "-07:00" // always numeric
	stdNumColonSecondsTZ                           // "-07:00:00"
	stdFracSecond0                                 // ".0", ".00", ... , trailing zeros included
	stdFracSecond9                                 // ".9", ".99", ..., trailing zeros omitted

	stdNeedDate       = 1 << 8             // need month, day, year
	stdNeedYday       = 1 << 9             // need yday
	stdNeedClock      = 1 << 10            // need hour, minute, second
	stdArgShift       = 16                 // extra argument in high bits, above low stdArgShift
	stdSeparatorShift = 28                 // extra argument in high 4 bits for fractional second separators
	stdMask           = 1<<stdArgShift - 1 // mask out argument
)`,
	},
	{
		data: `struct Foo{
    Foo:int"json:\"foo\""// foo
    Fooooo:bool"json:\"bar\""// foo
    F:MyType"json:\"baz\""// foo
    Foo:int"json:\"buz\""// foo
}`,
		out: `struct Foo {
	Foo:    int    "json:\"foo\"" // foo
	Fooooo: bool   "json:\"bar\"" // foo
	F:      MyType "json:\"baz\"" // foo
	Foo:    int    "json:\"buz\"" // foo
}`,
	},
	{
		data: `fn foo() {
if foo && bar && baz {
	}

	}`,
		out: `fn foo() {
	if foo && bar && baz {
	}
}`,
	},
	{
		data: `fn foo() {
if foo &&
bar &&
baz {}

	}`,
		out: `fn foo() {
	if foo &&
		bar &&
		baz {
	}
}`,
	},
	{
		data: `fn foo() {
if self.r == eof ||
self.r != ' ' &&
self.r==
"hello"==
'a' &&
self.r != '\t' &&
self.r != '\v' ||
self.r != '\r' ||
self.r != '\n' &&
self.r == 20 &&
self.r == 20 {
continue}

	}`,
		out: `fn foo() {
	if self.r == eof ||
		self.r != ' ' &&
			self.r ==
				"hello" ==
				'a' &&
			self.r != '\t' &&
			self.r != '\v' ||
		self.r != '\r' ||
		self.r != '\n' &&
			self.r == 20 &&
			self.r == 20 {
		continue
	}
}`,
	},
	{
		data: `fn foo() {
if self.r &&
self.r ==
"hello" &&
'a' ||
self.r != '\t' {
continue
	}}`,
		out: `fn foo() {
	if self.r &&
		self.r ==
			"hello" &&
		'a' ||
		self.r != '\t' {
		continue
	}
}`,
	},
	{
		data: `fn foo() {
foo.Foo().
Bar(
"foo", "bar").
Baz().BarBaz()
	}`,
		out: `fn foo() {
	foo.Foo().
		Bar(
			"foo", "bar").
		Baz().BarBaz()
}`,
	},
	{
		data: `fn foo() {
foo.Foo().Bar(
"foo","bar").Baz().BarBaz()
	}`,
		out: `fn foo() {
	foo.Foo().Bar(
		"foo", "bar").Baz().BarBaz()
}`,
	},
	{
		data: `fn foo() {
foo.Foo().Bar(
"foo",
"bar").Baz().BarBaz()
	}`,
		out: `fn foo() {
	foo.Foo().Bar(
		"foo",
		"bar").Baz().BarBaz()
}`,
	},
	{
		data: `fn foo() {
foo.Foo().Bar("foo",
"bar").Baz().BarBaz()
	}`,
		out: `fn foo() {
	foo.Foo().Bar("foo",
		"bar").Baz().BarBaz()
}`,
	},
	{
		data: `fn foo() {
foo.Foo().Bar("foo",
"bar").
Baz().
BarBaz()
	}`,
		out: `fn foo() {
	foo.Foo().Bar("foo",
		"bar").
		Baz().
		BarBaz()
}`,
	},
	{
		data: `fn foo() {
foo.Foo().Bar("foo","bar").
Baz().
BarBaz()
	}`,
		out: `fn foo() {
	foo.Foo().Bar("foo", "bar").
		Baz().
		BarBaz()
}`,
	},
	{
		data: `fn foo() {
foo.
Bar().
Baz(
"foo",
"bar",
"baz") else {
println("error handling...")
}}`,
		out: `fn foo() {
	foo.
		Bar().
		Baz(
			"foo",
			"bar",
			"baz") else {
		println("error handling...")
	}
}`,
	},
])

#test
fn testFormat(t: &testing::T) {
	for i, c in formatTests {
		out := format("<test-input>", []byte(c.data))
		if str(out) != c.out {
			t.Errorf("#{} failed", i)
		}
	}
}